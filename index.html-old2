<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tesseract.js Video Streaming Recognition</title>
  <link rel="stylesheet" href="./style.css">
  <script src='./tesseract.js@v2.0.0-beta.1.js'></script>
</head>
<body>
  <div id="root">
    <img id="imgout" src="./mjpeg/static.jpg">
    <div id="sep"></div>
    <div id="messages">
    </div>
  </div>
<!--  <script>
    const recordScreen = require('record-screen')
const recording = recordScreen("./test.mp4", {
 // Record an MJPEG stream, defaults to port 9000
  resolution: '1366x768', // Display resolution
  videoFilter: undefined, // Video filters to apply, e.g. 'crop=480:300:960:600'
  
})

recording.promise
  .then(result => {
    // Screen recording is done
    //const video = document.getElementById('poem-video');
    //process.stdout.write(result.stdout)
    //process.stderr.write(result.stderr)
    console.log("recording done");
    const video = result;
  })
  .catch(error => {
    // Screen recording has failed
    console.error(error)
  })

// As an example, stop the screen recording after 5 seconds:
setTimeout(() => recording.stop(), 1000)
  </script>-->
 <!--<script>
const { Transform } = require("stream")
 
 class ExtractFrames extends Transform {
   constructor(delimiter) {
     super({ readableObjectMode: true })
     this.delimiter = Buffer.from(delimiter, "hex")
     this.buffer = Buffer.alloc(0)
   }
  
   _transform(data, enc, cb) {
     // Add new data to buffer
     this.buffer = Buffer.concat([this.buffer, data])
     while (true) {
       const start = this.buffer.indexOf(this.delimiter)
       if (start < 0) break // there's no frame data at all
       const end = this.buffer.indexOf(this.delimiter, start + this.delimiter.length)
       if (end < 0) break // we haven't got the whole frame yet
       this.push(this.buffer.slice(start, end)) // emit a frame
       this.buffer = this.buffer.slice(end) // remove frame data from buffer
       if (start > 0) console.error(`Discarded ${start} bytes of invalid data`)
     }
     cb()
   }
 }
  </script>-->
  <!--<script>
    const recordScreen = require('record-screen')

const recording = recordScreen('/tmp/test.mp4', {
  inputFormat: 'mjpeg' // Record an MJPEG stream, defaults to port 9000
})

recording.promise
  .then(result => {
    // Screen recording is done
    process.stdout.write(result.stdout)
    process.stderr.write(result.stderr)
  })
  .catch(error => {
    // Screen recording has failed
    console.error(error)
  })

// As an example, stop the screen recording after 5 seconds:
setTimeout(() => recording.stop(), 5000)
  </script>-->
<script type="module">

    const { spawn } = require("child_process");
spawn("./mjpeg-server", ["-- ffmpeg \ -filter:v "crop=1100:150:595:1300"\-loglevel debug \ -probesize 32 \ -fpsprobesize 0 \ -analyzeduration 0 \ -fflags nobuffer \ -f x11grab \ -r 15 \ -video_size 1366x768 \ -i :0 \ -f mpjpeg \ -q 2 \ -"]);

</script>

  <!--<script>
    const { createWorker, createScheduler } = Tesseract;

    const scheduler = createScheduler();
    const video = document.getElementById("poem-video");
    const messages = document.getElementById('messages');



    //declarations
    let timerId = null;
    const addMessage = (m, bold) => {
      let msg = `<p>${m}</p>`;
      if (bold) {
        msg = `<p class="bold">${m}</p>`;
      }
      messages.innerHTML += msg;
      messages.scrollTop = messages.scrollHeight;
    }

    const doOCR = async () => {
      const c = document.createElement('canvas');
      c.width = 640;
      c.height = 360;
      c.getContext('2d').drawImage(video, 0, 0, 640, 360);
      const start = new Date();
      const { data: { text } } = await scheduler.addJob('recognize', c);
      spawn("espeak", [text]);
      const end = new Date()
      addMessage(`[${start.getMinutes()}:${start.getSeconds()} - ${end.getMinutes()}:${end.getSeconds()}], ${(end - start) / 1000} s`);
      text.split('\n').forEach((line) => {
        addMessage(line);
      });
    };

    (async () => {
      addMessage('Initializing Tesseract.js');
      for (let i = 0; i < 4; i++) { //create as many worker threads to get the job done faster
        const worker = createWorker();
        await worker.load();
        await worker.loadLanguage('eng');
        await worker.initialize('eng');
        scheduler.addWorker(worker);
      }
      addMessage('Initialized Tesseract.js');
      video.addEventListener('play', () => {
        timerId = setInterval(doOCR, 1000);
      });
      video.addEventListener('pause', () => {
        clearInterval(timerId);
      });
      addMessage('Now you can play the video. :)');
      video.controls = true;
    })();
  </script>-->



  <script>
    const { createWorker } = require('tesseract.js');
    const path = require('path');

    const { spawn } = require("child_process");

    const fs = require('fs');
    const MjpegDecoder = require('mjpeg-decoder');

    const worker = createWorker({
      cachePath: path.join(__dirname, 'lang-data'),
      logger: m => console.log(m),
    });

    const vidbuffer = Array();
    // create a decoder which delivers a JPEG frame
    // via the 'frame' event every 3 seconds.
    const decoder = new MjpegDecoder(
      'http://localhost:9000', { interval: 60000 }
      );
    
    decoder.on('frame', (frame, seq) => {
      fs.writeFileSync(`./mjpeg/static.jpg`, frame);
      //imagData = 'data:image/png;base64,' + btoa(Buffer.from(frame).toString('base64'));



     // document.getElementById("imgout").src = './mjpeg/static.jpg';
      console.log(frame, seq);

      (async () => {
      await worker.load();
      await worker.loadLanguage('eng');
      await worker.initialize('eng');
      //const { data: { text tmp} } = await worker.recognize(path.join(__dirname, 'images', 'tha.png'));
      const { data: { text } } = await worker.recognize(path.join(__dirname, 'mjpeg', 'static.jpg'));
      //fs.createReadStream(__dirname + '/octocat.png').pipe(stream);
 
      console.log(text);
      spawn("espeak", [text]); //ok it's dependent on the await if the code. aync makes it so theres no skipping
    
      await worker.terminate();
    })();


    });
    
    decoder.start();






  </script>
</body>
</html>
